x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10)
log_log_vals = lapply(theta_seq, function(theta) exp.ll(theta_seq, x))
plot(theta_seq, ll_vals, type="l",
xlab="theta", ylab="Likelihood")
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta_seq, x))
plot(theta_seq, ll_vals, type="l",
xlab="theta", ylab="Likelihood")
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta_seq, x))
plot(theta_seq, ll_vals, type="l",
xlab="theta", ylab="Likelihood")
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta_seq, x))
plot(theta_seq, ll_vals, type="l",
xlab="theta", ylab="Likelihood")
theta_tilde = 6
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = 2*(ll_hat - ll_tilde)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n * log(theta) - theta * sum(x)))  # 取负号，因为 optim 进行最小化
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)  # BFGS 估计的 theta
print(result_SANN$par)  # SANN 估计的 theta
print(time_BFGS)  # BFGS 计算时间
print(time_SANN)  # SANN 计算时间
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta_seq, x))
plot(theta_seq, ll_vals, type="l",
xlab="theta", ylab="Likelihood")
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)  # More points for smoother plot
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))  # Fix function call
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="blue", lwd=2)
theta_tilde = 6  # Alternative hypothesis
# Compute MLE of theta
theta_hat = 1 / mean(x)
# Compute log-likelihoods
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
# Compute likelihood ratio test statistic
likelihood_ratio = 2 * (ll_hat - ll_tilde)
# Print result
print(likelihood_ratio)
# Define the joint density function
joint_density = function(params) {
x = params[1]
y = params[2]
# Example function (modify as per given problem statement)
f_xy = exp(- (x^2 + y^2))  # Example: A Gaussian-like function
return(-f_xy)  # `optim()` minimizes, so negate the function
}
# Run optimization with different starting points
optim1 = optim(c(1, 0), joint_density, method = "BFGS")
optim2 = optim(c(5, 5), joint_density, method = "BFGS")
# Print results
print(optim1)
print(optim2)
# Define the log-joint-density function
log_joint_density = function(params) {
x = params[1]
y = params[2]
# Example function
f_xy = exp(- (x^2 + y^2))
log_f_xy = log(f_xy)
return(-log_f_xy)  # `optim()` minimizes, so negate the log-likelihood
}
# Run optimization with log-likelihood
optim1_log = optim(c(1, 0), log_joint_density, method = "BFGS")
optim2_log = optim(c(5, 5), log_joint_density, method = "BFGS")
# Print results
print(optim1_log)
print(optim2_log)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
# I looks like around 5
theta_tilde = 6
theta_hat = 1/mean(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = 2*(ll_hat - ll_tilde)
print(likelihood_ratio)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals,
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = 1/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = 2*(ll_hat - ll_tilde)
print(likelihood_ratio)
theta_tilde = 6
theta_hat = length(x)/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = 2*(ll_hat - ll_tilde)
print(likelihood_ratio)
theta_tilde = 6
theta_hat = length(x)/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(exp_ll(theta_tilde, x) - exp_ll(theta_hat, x))
theta_tilde = 6
theta_hat = length(x)/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(exp_ll(theta_tilde, x) - exp.ll(theta_hat, x))
theta_tilde = 6
theta_hat = length(x)/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(exp.ll(theta_tilde, x) - exp.ll(theta_hat, x))
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n * log(theta) - theta * sum(x)))  # 取负号，因为 optim 进行最小化
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print()
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print("\n")
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print("")
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
neg_mvn <- function(xy) {
return(-mvn(xy))
}
start_time1 <- Sys.time()
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
time1 <- Sys.time() - start_time1
start_time2 <- Sys.time()
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
time2 <- Sys.time() - start_time2
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value),
Time_Seconds = c(time1, time2)
)
neg_mvn <- function(xy) {
return(-mvn(xy))
}
start_time1 <- Sys.time()
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
time1 <- Sys.time() - start_time1
start_time2 <- Sys.time()
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
time2 <- Sys.time() - start_time2
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value),
Time_Seconds = c(time1, time2)
)
neg_mvn <- function(xy) {
return(-mvn(xy))
}
start_time1_log <- Sys.time()
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
neg_mvn <- function(xy) {
return(-mvn(xy))
}
start_time1_log <- Sys.time()
opt1_log <- optim(c(1, 0), neg_mvn, method = "BFGS")
time1_log <- Sys.time() - start_time1_log
start_time2_log <- Sys.time()
opt2_log <- optim(c(5, 5), neg_mvn, method = "BFGS")
time2_log <- Sys.time() - start_time2_log
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value),
Time_Seconds = c(time1_log, time2_log)
)
neg_opt_mvn <- function(xy) {
return(-log_mvn(xy))  # Since optim() minimizes by default
}
# Optimization with starting value (1,0)
start_time1_log <- Sys.time()
opt1_log <- optim(c(1, 0), neg_opt_mvn, method = "BFGS")
neg_opt_mvn <- function(xy) {
return(-mvn(xy))  # Since optim() minimizes by default
}
# Optimization with starting value (1,0)
start_time1_log <- Sys.time()
opt1_log <- optim(c(1, 0), neg_opt_mvn, method = "BFGS")
time1_log <- Sys.time() - start_time1_log
# Optimization with starting value (5,5)
start_time2_log <- Sys.time()
opt2_log <- optim(c(5, 5), neg_opt_mvn, method = "BFGS")
time2_log <- Sys.time() - start_time2_log
# Results comparison
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value),
Time_Seconds = c(time1_log, time2_log)
)
# Define negative function for optimization (since optim minimizes)
neg_mvn <- function(xy) {
return(-mvn(xy))
}
# Optimization using BFGS with different starting points
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")  # Start at (1,0)
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")  # Start at (5,5)
# Print results
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)  # Convert back to positive
)
log_mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
return(-0.5 * ((x - 2)^2 + (y - 1)^2))
}
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, log_mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
log_mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
return(-0.5 * ((x - 2)^2 + (y - 1)^2))
}
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, log_mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))  # Since optim minimizes, we negate the function
}
# Optimization using BFGS with starting point (1,0)
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
# Optimization using BFGS with starting point (5,5)
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
# Print results
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)  # Convert back to positive
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
# Compute log-likelihood values
grid$log_z <- apply(grid, 1, log_mvn)
# 3D plot
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
# Compute log-likelihood values
grid$log_z <- apply(grid, 1, log_mvn)
# 3D plot
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, log_mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-log_mvn(xy))  # Since optim minimizes, we negate the function
}
# Optimization using BFGS with log-likelihood, starting at (1,0)
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
# Optimization using BFGS with log-likelihood, starting at (5,5)
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
# Print results for log-likelihood optimization
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x)/sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(exp.ll(theta_tilde, x) - exp.ll(theta_hat, x))
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, log_mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-log_mvn(xy))
}
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
