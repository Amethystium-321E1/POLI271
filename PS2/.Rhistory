Function_Value = c(-opt1$value, -opt2$value)
)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-mvn(xy))
}
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x) {
n = length(x)
return(n * log(theta) - theta * sum(x))
}
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)  # Corrected likelihood ratio computation
print(likelihood_ratio)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
optim(c(5,5), neg_mvn, method = "Nelder-Mead")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
log_likelihood = function(theta, x) {
n = length(x)
n / sum(x)
}
theta_hat <- mle_theta(x)
log_likelihood = function(theta, x) {
n = length(x)
n / sum(x)
}
theta_hat <- log_likelihood(x)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, function(theta) exp.ll(theta, x))
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, exp.ll(theta, x) x = x)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, exp.ll, x = x)
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_tilde - ll_hat)
print(likelihood_ratio)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_hat - ll_tilde)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, exp.ll, x = x)
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_hat - ll_tilde)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-mvn(xy))
}
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, exp.ll, x = x)
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_hat - ll_tilde)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-mvn(xy))
}
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
library(formatR)
set.seed(5)
x <- rexp(10000, 5)
exp.ll = function(theta, x){
n = length(x)
return(n*log(theta) - theta*sum(x))
}
theta_seq = seq(1, 10, length.out = 100)
log_log_vals = sapply(theta_seq, exp.ll, x = x)
plot(theta_seq, log_log_vals, type="l",
xlab="theta", ylab="Likelihood", col="purple", lwd=2)
theta_tilde = 6
theta_hat = length(x) / sum(x)
ll_hat = exp.ll(theta_hat, x)
ll_tilde = exp.ll(theta_tilde, x)
likelihood_ratio = exp(ll_hat - ll_tilde)
print(likelihood_ratio)
log_likelihood = function(theta, x) {
n = length(x)
return(- (n*log(theta)-theta*sum(x)))
}
start_time_BFGS = Sys.time()
result_BFGS = optim(par=1, fn=log_likelihood, x=x, method="BFGS")
end_time_BFGS = Sys.time()
time_BFGS = end_time_BFGS - start_time_BFGS
start_time_SANN = Sys.time()
result_SANN = optim(par=1, fn=log_likelihood, x=x, method="SANN")
end_time_SANN = Sys.time()
time_SANN = end_time_SANN - start_time_SANN
print(result_BFGS$par)
print(result_SANN$par)
print(time_BFGS)
print(time_SANN)
mvn <- function(xy) {
x <- xy[1]
y <- xy[2]
z <- exp(-0.5 * ((x - 2)^2 + (y - 1)^2))
return(z)
}
# install.packages('lattice')
library(lattice)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$z <- apply(grid, 1, mvn)
wireframe(z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_mvn <- function(xy) {
return(-mvn(xy))
}
opt1 <- optim(c(1, 0), neg_mvn, method = "BFGS")
opt2 <- optim(c(5, 5), neg_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1$par[1], opt2$par[1]),
Optimum_Y = c(opt1$par[2], opt2$par[2]),
Function_Value = c(-opt1$value, -opt2$value)
)
y <- x <- seq(-5, 5, by = 0.1)
grid <- expand.grid(x, y)
names(grid) <- c("x", "y")
grid$log_z <- apply(grid, 1, mvn)
wireframe(log_z ~ x + y, data = grid, shade = TRUE, light.source = c(10, 0, 10), scales = list(arrows = FALSE))
neg_log_mvn <- function(xy) {
return(-mvn(xy))
}
opt1_log <- optim(c(1, 0), neg_log_mvn, method = "BFGS")
opt2_log <- optim(c(5, 5), neg_log_mvn, method = "BFGS")
data.frame(
Start_Point = c("(1,0)", "(5,5)"),
Optimum_X = c(opt1_log$par[1], opt2_log$par[1]),
Optimum_Y = c(opt1_log$par[2], opt2_log$par[2]),
Log_Function_Value = c(-opt1_log$value, -opt2_log$value)
)
